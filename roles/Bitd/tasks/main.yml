---
- name: get minikube IP
  shell: minikube ip
  register: res
  when: up_local

- name: check if secret exists
  set_fact:
    secret_lookup: "{{ lookup('k8s', api_version='v1', kind='Secret', namespace=meta.namespace, resource_name=rpc_secret_name) }}"

- debug:
    msg: "{{ secret_lookup }}"
- name: create creds secret if it doesn't exist
  k8s:
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "{{ rpc_secret_name }}"
        namespace: "{{ meta.namespace }}"
      data:
        user: "{{ user | b64encode }}"
        password: "{{ password | b64encode }}"
  when: (secret_lookup|length==0)
    
- name: create pvc
  k8s:
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: bitcoin
        namespace: "{{ meta.namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi

# tasks file for Bitd
- name: start bitd
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ meta.name }}-bitd'
        namespace: '{{ meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: bitd
        template:
          metadata:
            labels:
              app: bitd
          spec:
            containers:
            - name: bitd
              image: "docker.io/dymurray/bitcoin-sv-bitd"
              command: ["/usr/local/bin/bitcoind"]
              args: ["-server", "-rest", "-listen", "-rpcallowip=0.0.0.0/0", "-prune=600", "-rpcuser={{ user }}", "-rpcpassword={{ password }}"]
              ports:
                - containerPort: 8332
              volumeMounts:
                - name: bitcoin
                  mountPath: /root/.bitcoin
            volumes:
              - name: bitcoin
                persistentVolumeClaim:
                  claimName: bitcoin
  register: dep

- name: create service
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{ meta.name }}-bitd'
        namespace: '{{ meta.namespace }}'
      spec:
        type: NodePort
        selector:
          app: bitd
        ports:
        - protocol: TCP
          port: 8332
          targetPort: 8332
          name: rpc
  register: svc

- debug:
    msg: "{{ svc }}"

- debug:
    msg: "{{ svc.result.spec.clusterIP }}:{{ svc.result.spec.ports[0].port }}"
- set_fact:
    ip: "{{ svc.result.spec.clusterIP }}:{{ svc.result.spec.ports[0].port }}"
  when: up_local == false
- set_fact:
    ip: "{{ res.stdout }}:{{svc.result.spec.ports[0].nodePort}}"
  when: up_local
- debug:
    msg: "{{ ip }}"

- uri:
    url: http://{{ ip }}
    method: POST
    user: "{{ user }}"
    password: "{{ password }}"
    body: "{{ lookup('file', 'getblockchaininfo.json') }}"
    force_basic_auth: yes
    body_format: json
  register: chaininfo

- uri:
    url: http://{{ ip }}
    method: POST
    user: "{{ user }}"
    password: "{{ password }}"
    body: "{{ lookup('file', 'getwalletinfo.json') }}"
    force_basic_auth: yes
    body_format: json
  register: walletinfo

- uri:
    url: http://{{ ip }}
    method: POST
    user: "{{ user }}"
    password: "{{ password }}"
    body: "{{ lookup('file', 'getaccountaddress.json') }}"
    force_basic_auth: yes
    body_format: json
  register: addressinfo
- debug:
    msg: "{{ addressinfo.json }}"

- set_fact:
    synced: false
- set_fact:
    synced: true
  when: chaininfo.json.result.blocks | int == chaininfo.json.result.headers | int

- k8s_status:
    api_version: bitcoin.example.com/v1
    kind: Bitd
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
    status:
      address: "{{ addressinfo.json.result }}"
      blockCount: "{{ chaininfo.json.result.blocks | int }}"
      headers: "{{ chaininfo.json.result.headers | int }}"
      balance: "{{ walletinfo.json.result.balance }}"
      unconfirmedBalance: "{{ walletinfo.json.result.unconfirmed_balance }}"
      synced: "{{ synced }}"


- debug:
    msg: "{{ synced }}"
